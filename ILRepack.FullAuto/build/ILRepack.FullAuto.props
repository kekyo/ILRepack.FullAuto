<!--
/////////////////////////////////////////////////////////////////////////////////////
//
// ILRepack.FullAuto - Full automatic ILRepack executor on .NET, .NET Core and .NET Framework
// Copyright (c) Kouji Matsui (@kozy_kekyo, @kekyo@mastodon.cloud)
//
// Licensed under MIT: https://opensource.org/licenses/MIT
//
/////////////////////////////////////////////////////////////////////////////////////
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
    <_ILRepack_RuntimeName></_ILRepack_RuntimeName>
  </PropertyGroup>
  <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
    <_ILRepack_RuntimeName>mono </_ILRepack_RuntimeName>
  </PropertyGroup>

  <PropertyGroup>
    <_ILRepack_ScriptBaseDir>$(MSBuildThisFileDirectory)</_ILRepack_ScriptBaseDir>
    <CopyLocalLockFileAssemblies>True</CopyLocalLockFileAssemblies>
  </PropertyGroup>

  <!-- ============================================================================= -->

  <!-- https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-roslyncodetaskfactory?view=vs-2022#provide-backward-compatibility -->
  <Choose>
    <When Condition="'$(MSBuildVersion.Substring(0,2))' &gt;= 16 OR ('$(MSBuildVersion.Substring(0,2))' == 15 AND '$(MSBuildVersion.Substring(3,1))' &gt;= 8)">
      <PropertyGroup>
        <_ILRepack_TaskFactory>RoslynCodeTaskFactory</_ILRepack_TaskFactory>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <_ILRepack_TaskFactory>CodeTaskFactory</_ILRepack_TaskFactory>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Custom inlined task -->
    
  <UsingTask
    TaskName="_ILRepack_GetCombinedReferencesBasePath"
    TaskFactory="$(_ILRepack_TaskFactory)"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <References ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <CombinedReferencesBasePath Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <!-- HACK: Will cause compilation error by using `System.Collection.Generic` and/or `System.Linq` on MacOS
           (Maybe related both mono environment and unreferenced core assembly on `RoslynCodeTaskFactory`) -->
      <Using Namespace="System.Collections"/>
      <Using Namespace="Microsoft.Build.Framework"/>
      <Code Type="Fragment" Language="cs">
<![CDATA[
        Hashtable candidates = new Hashtable();
        foreach (ITaskItem item in References)
        {
            if (!string.IsNullOrEmpty(item.ItemSpec))
            {
                string path = Path.GetDirectoryName(Path.GetFullPath(item.ItemSpec));
                candidates[path] = path;
            }
        }
        object[] pathList = new object[candidates.Keys.Count];
        candidates.Keys.CopyTo(pathList, 0);
        CombinedReferencesBasePath = string.Join(";", pathList);
]]>
      </Code>
    </Task>
  </UsingTask>
    
  <UsingTask
    TaskName="_ILRepack_GetAllowDuplicateOption"
    TaskFactory="$(_ILRepack_TaskFactory)"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <Elements ParameterType="System.String" />
      <Postfix ParameterType="System.String" />
      <AllowDuplicateNamespacesOption Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System"/>
      <Using Namespace="System.Text"/>
      <Using Namespace="System.Collections"/>
      <Using Namespace="Microsoft.Build.Framework"/>
      <Code Type="Fragment" Language="cs">
<![CDATA[
        Elements = Elements != null ? Elements : string.Empty;
        Postfix = Postfix != null ? Postfix : string.Empty;
        char[] splitters = new char[] { ',', ';' };
        string[] elements = Elements.Split(splitters, StringSplitOptions.RemoveEmptyEntries);
        StringBuilder sb = new StringBuilder();
        foreach (string element in elements)
        {
            string trimmed = element.Trim();
            if (!string.IsNullOrEmpty(trimmed))
            {
                if (sb.Length >= 1)
                {
                    sb.Append(' ');
                }
                sb.Append("--allowdup:");
                sb.Append(trimmed);
                sb.Append(Postfix);
            }
        }
        AllowDuplicateNamespacesOption = sb.ToString();
]]>
      </Code>
    </Task>
  </UsingTask>
    
</Project>
