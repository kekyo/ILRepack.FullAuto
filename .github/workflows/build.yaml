name: .NET

on: [push]

jobs:
  linux:
    strategy:
      matrix:
        netver: [2.2, 3.1, 5.0, 6.0, 7.0, 8.0]
    runs-on: ubuntu-latest
    steps:

    #-----------------------------------------------------------------------
    # Checkout

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    #   lfs: true
    #- name: Checkout LFS objects
    #  run: git lfs checkout

    - name: Extract branch name
      id: extract_branch_name
      run: |
        export branch_name=`git name-rev --name-only --exclude=tags/* HEAD`
        echo "Detected current branch: ${branch_name}"
        echo "branch_name=${branch_name}" >> $GITHUB_OUTPUT

    #-----------------------------------------------------------------------
    # Setup environments

    - name: Uninstall Existing .NET SDK
      run: |
        sudo apt-get remove --purge '^dotnet-sdk-' -y

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          ${{ matrix.netver }}.x

    - name: Setup NuGet package reference
      run: |
#        dotnet nuget add source ${{secrets.GH_LOCAL_NUGET_URL}} -n ref1 -u ${{secrets.GH_LOCAL_NUGET_USER}} -p ${{secrets.GH_LOCAL_NUGET_PASSWORD}} --store-password-in-clear-text --configfile nuget.config
#        dotnet nuget add source ${{secrets.GH_NUGET_URL}} -n ref2 -u ${{secrets.GH_NUGET_USER}} -p ${{secrets.GH_NUGET_PASSWORD}} --store-password-in-clear-text --configfile nuget.config

    #-----------------------------------------------------------------------
    # Build

    - name: Build
      run: dotnet build -p:Configuration=Release -p:Platform="Any CPU" -p:RestoreNoCache=True -p:BuildIdentifier=${GITHUB_RUN_NUMBER} ILRepack.FullAuto.sln

    - name: Build NuGet packages
      run: dotnet pack -p:Configuration=Release -p:Platform="Any CPU" -p:BuildIdentifier=${GITHUB_RUN_NUMBER} -o artifacts ILRepack.FullAuto.sln

    #-----------------------------------------------------------------------
    # Test

#    - name: Test
#      run: dotnet test --no-restore --verbosity normal -p:CITest=True
#      timeout-minutes: 2

    #-----------------------------------------------------------------------
    # Deploy packages (develop)

    #- name: Deploy NuGet package (develop/ref1)
    #  if: startsWith( github.ref, 'refs/tags/' )
    #  run: dotnet nuget push artifacts/ILRepack.FullAuto.*.nupkg --source ref1

    #-----------------------------------------------------------------------
    # Deploy packages (main)

    #- name: Deploy NuGet package (main/ref2)
    #  if: (startsWith( github.ref, 'refs/tags/' )) && (endsWith(steps.extract_branch_name.outputs.branch_name, 'main'))
    #  run: dotnet nuget push artifacts/ILRepack.FullAuto.*.nupkg --source ref1

  windows:
    strategy:
      matrix:
        netver: [2.2, 3.1, 5.0, 6.0, 7.0, 8.0]
    runs-on: windows-latest
    steps:

    #-----------------------------------------------------------------------
    # Checkout

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    #   lfs: true
    #- name: Checkout LFS objects
    #  run: git lfs checkout

    - name: Extract branch name
      id: extract_branch_name
      run: |
        $branch_name=$(git name-rev --name-only --exclude=tags/* HEAD)
        echo "Detected current branch: ${branch_name}"
        echo "branch_name=${branch_name}" >> $GITHUB_OUTPUT

    #-----------------------------------------------------------------------
    # Setup environments

    # windows vm is not clean, but I don't know how to make clean environment...
    #- name: Uninstall Existing .NET SDK
    #  run: |
    #    $sdkVersions = Get-Command -Name dotnet | ForEach-Object { $_.FileVersionInfo.ProductVersion }
    #    foreach ($sdkVersion in $sdkVersions) {
    #        Write-Host "Uninstalling .NET SDK version: $sdkVersion"
    #        dotnet sdk uninstall -v $sdkVersion --all
    #    }

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          ${{ matrix.netver }}.x

    - name: Setup NuGet package reference
      run: |
#        dotnet nuget add source ${{secrets.GH_LOCAL_NUGET_URL}} -n ref1 -u ${{secrets.GH_LOCAL_NUGET_USER}} -p ${{secrets.GH_LOCAL_NUGET_PASSWORD}} --store-password-in-clear-text --configfile nuget.config
#        dotnet nuget add source ${{secrets.GH_NUGET_URL}} -n ref2 -u ${{secrets.GH_NUGET_USER}} -p ${{secrets.GH_NUGET_PASSWORD}} --store-password-in-clear-text --configfile nuget.config

    #-----------------------------------------------------------------------
    # Build

    - name: Build
      run: dotnet build -p:Configuration=Release -p:Platform="Any CPU" -p:RestoreNoCache=True -p:BuildIdentifier=${GITHUB_RUN_NUMBER} ILRepack.FullAuto.sln

    - name: Build NuGet packages
      run: dotnet pack -p:Configuration=Release -p:Platform="Any CPU" -p:BuildIdentifier=${GITHUB_RUN_NUMBER} -o artifacts ILRepack.FullAuto.sln

    #-----------------------------------------------------------------------
    # Test

#    - name: Test
#      run: dotnet test --no-restore --verbosity normal -p:CITest=True
#      timeout-minutes: 2

    #-----------------------------------------------------------------------
    # Deploy packages (develop)

    #- name: Deploy NuGet package (develop/ref1)
    #  if: startsWith( github.ref, 'refs/tags/' )
    #  run: dotnet nuget push artifacts/ILRepack.FullAuto.*.nupkg --source ref1

    #-----------------------------------------------------------------------
    # Deploy packages (main)

    #- name: Deploy NuGet package (main/ref2)
    #  if: (startsWith( github.ref, 'refs/tags/' )) && (endsWith(steps.extract_branch_name.outputs.branch_name, 'main'))
    #  run: dotnet nuget push artifacts\ILRepack.FullAuto.*.nupkg --source ref1
